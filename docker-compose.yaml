version: "3.9"
services:
    service-registry:
        build:
            context: ./service-registry
            dockerfile: ../Dockerfile
            args:
                SERVICE: service-registry
        container_name: service-registry
        ports:
            - "8761:8761"
    config-server:
        build:
            context: ./config-server
            dockerfile: ../Dockerfile
            args:
                SERVICE: config-server
        container_name: config-server
        ports:
            - "8888:8888"
        depends_on:
            - service-registry
        environment:
            - GITHUB_TOKEN=${GITHUB_TOKEN}
    api-gateway:
        build:
            context: ./api-gateway
            dockerfile: ../Dockerfile
            args:
                SERVICE: api-gateway
        container_name: api-gateway
        ports:
            - "8080:8080"
        depends_on:
            - service-registry
            - config-server
        environment:
            - SPRING_APPLICATION_NAME=${APP_NAME:-api-gateway}
            - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
            - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
    nginx:
        image: nginx:alpine
        container_name: nginx
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
        depends_on:
            - api-gateway
    redpanda:
        image: docker.redpanda.com/redpandadata/redpanda:latest
        container_name: redpanda
        command: redpanda start --smp 1 --overprovisioned --node-id 0 --check=false
        ports:
            - "9092:9092"
            - "9644:9644"
        environment:
            - REDPANDA_AUTO_CREATE_TOPICS=true
    redis:
        image: redis:7-alpine
        container_name: redis
        ports:
            - "6379:6379"
    postgres:
        image: postgres:16-alpine
        container_name: postgres
        environment:
            - POSTGRES_USER=dev
            - POSTGRES_PASSWORD=dev
            - POSTGRES_DB=appdb
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
    minio:
        image: minio/minio:latest
        container_name: minio
        environment:
            - MINIO_ROOT_USER=admin
            - MINIO_ROOT_PASSWORD=admin123
        command: server /data
        ports:
            - "9000:9000"
            - "9001:9001"
        volumes:
            - minio-data:/data
    vault:
        image: vault:latest
        container_name: vault
        ports:
            - "8200:8200"
        environment:
            - VAULT_DEV_ROOT_TOKEN_ID=root
            - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
        cap_add:
            - IPC_LOCK
    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        ports:
            - "9411:9411"
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus-lite.yaml:/etc/prometheus/prometheus.yaml:ro
    loki:
        image: grafana/loki:2.9.0
        container_name: loki
        command: -config.file=/etc/loki/local-config.yaml
        ports:
            - "3100:3100"
    promtail:
        image: grafana/promtail:2.9.0
        container_name: promtail
        volumes:
            - /var/log:/var/log
            - ./promtail-config.yaml:/etc/promtail/config.yaml
        command: -config.file=/etc/promtail/config.yaml
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        depends_on:
            - prometheus
            - loki
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
    registry:
        image: registry:2
        container_name: local-registry
        ports:
            - "5000:5000"
        volumes:
            - registry-data:/var/lib/registry
volumes:
    pgdata:
    minio-data:
    registry-data:
